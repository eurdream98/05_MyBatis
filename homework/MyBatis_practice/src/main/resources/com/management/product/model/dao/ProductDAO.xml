<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.management.product.model.dao.ProductDAO">

    <select id="selectAllProductList" resultType="com.management.product.model.dto.ProductDTO">
        SELECT
            *
        FROM
            product_info
    </select>
    <!-- 4. 조건에 따른 목록을 조회하는 쿼리를 작성하세요.
            (쿼리id) selectProductByCondition
            (참고 1) 제품명 조회인 경우, 검색어를 '포함'한 모든 제품을 조회합니다.
                     (예시) '솔' 검색 -> 솔방울, 칫솔 등 '솔' 포함 제품 모두 조회
            (참고 2) 판매점 유형별 조회의 경우,
                     '백화점'이면 할인율이 0%인 제품, '아울렛'이면 할인율이 1% 이상인 제품을 조회합니다.
            (참고 3) 이달의 신상품 조희의 경우, 출시일이 이번 달인 제품(예를 들어, 현재 기준이면 2023년 5월 출시 제품)울 조회합니다. -->
    <select id="selectProductByCondition" resultType="com.management.product.model.dto.ProductDTO">
    SELECT
        *
    FROM
        product_info
    <choose>
    <when test="option == 'productName'">
    WHERE PRODUCT_NAME LIKE CONCAT('%',#{value},'%')
    </when>
    <when test="option=='salesStore' and value=='백화점'">
    WHERE DISCOUNT_RATE=0
    </when>
        <when test="option=='salesStore' and value=='아울렛'">
            WHERE DISCOUNT_RATE>=1;
        </when>
        <when test="option=='newProduct'">
            WHERE SUBSTRING(RELEASE_DATE,5,2)=02
        </when>
        <when test="option=='nonProduction'">
            WHERE PRODUCTION_STATUS= 'N'
        </when>
    </choose>
    </select>
    <!-- 5. 제품 정보를 등록하는 쿼리를 작성하세요.
            (쿼리id) insertProduct -->
    <insert id="registProduct" parameterType="com.management.product.model.dto.ProductDTO">
        INSERT INTO
        product_info(PRODUCT_NAME,ORIGIN_COST,RELEASE_DATE,DISCOUNT_RATE,SALES_QUANTITY,STOCK_QUANTITY,CATEGORY_CODE,PRODUCTION_STATUS)
        VALUES(#{productName},#{originCost},#{releaseDate},#{discountRate},#{salesQuantity},#{stockQuantity},#{categoryCode},#{productionStatus})
    </insert>
    <!-- 6. 사용자가 수정을 원하는 데이터만 수정하도록 Dynamic Query를 활용한 쿼리를 작성하세요.
            (쿼리id) updateProduct -->
    <update id="modifyProductInfo" parameterType="com.management.product.model.dto.ProductDTO">
        UPDATE
            product_info
        <set>
            <if test="productName != 'SKIP'">
                PRODUCT_NAME=#{productName},
            </if>
            <if test="originCost != 'SKIP'">
                ORIGIN_COST=#{originCost},
            </if>
            <if test="releaseDate != 'SKIP'">
                RELEASE_DATE=#{releaseDate},
            </if>
            <if test="discountRate != 'SKIP'">
                DISCOUNT_RATE=#{discountRate},
            </if>
            <if test="salesQuantity != 'SKIP'">
                SALES_QUANTITY=#{salesQuantity},
            </if>
            <if test="stockQuantity != 'SKIP'">
                STOCK_QUANTITY=#{stockQuantity},
            </if>
            <if test="categoryCode != 'SKIP'">
                CATEGORY_CODE=#{categoryCode},
            </if>
            <if test="productionStatus != 'SKIP'">
                PRODUCTION_STATUS=#{productionStatus}
            </if>

        </set>
        WHERE
        PRODUCT_CODE=#{productCode}
    </update>
    <!-- 7. 제품 정보를 삭제하는 쿼리를 작성하세요.
            (쿼리id) deleteProduct -->
    <delete id="deleteProduct" parameterType="com.management.product.model.dto.ProductDTO">
        DELETE
        FROM
            product_info
        WHERE
            PRODUCT_CODE=#{productCode}
    </delete>
</mapper>
