02.01
view를 통해 service를 호출하였는데 view->controller->service순서로 쪼개질 수도 있다.

view에서는 사용자가 입력하거나 출려된 것을 보는 공간인데 입력한 정보를 파라미터로 전달 받고 전달받은 값을 검증해야하는 경우 검증해주는 것이 controller이다. 사용자에게 받은 정보를 가공하는 역할도 추가로 한다.

controller는 뷰와 서비스 사이에 껴서 사용자가 입력한 값을 검증하고 가공하여 서비스처리를 하고 그 결과를 반환받아 어떠한 뷰를 다시 사용자에게 보여줄것인지를 결정함

Model은 비즈니스 로직에 대한 내용이고 Controller는 입력된 값에 대한 검증,가공을 통해 반환하는 역할을하며 View는 사용자에게 보여지는 화면을 의미한다. 이후 Model에 있는 Service와Dao를 통해 DB와 연결되어 작업을 하게 된다.

DTO는 각각의 레이어에서 데이터를 주고 받을 때 데이터를 보낼 때 데이터를 뭉쳐서 전송할 수 있는 Model이다.
-------------------------------------------------------------------------------------------------------
테스트 작성법

junit은 기본 빌드의 depentencies에 있다.

프로젝트를 만들 때 테스트 코드를 작성해야한다.

작성한 클래스에 대해 test를 진행할 수 있다. 

junit라이브러리

test는 main/java아래의 동일한 경로로 클래스를 만들어주고 클래스명 뒤에 Tests를 붙혀준다. 

단위(유닛) 테스트 
한 가지 기능(메소드)마다 일을 잘 수행하는지 확인하며 특정 모듈이 의도 된 대로 정확하게 작동하는지 검증하는 절차,연관 컴포넌트가 개발 되지 않더라도 기능별 개발이 완료 된 것을 증멸할 수 있음

junit은 jupiter가 들어가 있는 패키지가 최근 버전임포트할 때 생각할 것

@BeforeEach : @Test가 붙은 테스트 메소드 하나를 실행하기 전마다 실행되는 메소드  사전에 필요한 자원을 선언해야할 때 사용
@BeforeAll : 모든 테스트가 실행하기전에 딱 한번 실행 -> static메소드로 만들어야함
@AfterEach : @Test가 붙은 테스트 메소드 하나를 실행한 후 마다 실행
@AfterAll : 모든 테스트가 끝나고 나서 실행 자원반납때 주로 이용 -> static메소드로 만들어야함-> static만들어야함 

assert로 시작하는 메소드들로 테스트 (~인지 아닌지를 판단)
assertEquals(예상값,result값,오차범위)

JDBC는 MyBatis와 JPA같은 영속성 프레임 워크의 근본이되는 기술이다. 
---------------------------------------------------------------------------------------------------
MyBatis는 개발자가 사용하기 편하도록 여러 기능들을 구현해놓았다.

프레임워크란 
개발자가 소프트웨어를 개발함에 있어 코드를 구현하는 개발 시간을 줄이고 코드의 재사용성을 증가 시킬 목적으로 일련의 클래스 묶음이나 뼈대,틀을 제공하는 라이브러리를 구현해놓은 것이다. 

개발자가 따라야하는 가이드를 제공한다.
가이드를 보고 이렇게 따라야하는구나 학습해야함
만들어서 제공해주고 있는 것이다. 개발할 수 있는 범위는 만들어져있는 범위까지만 정해져있음

영속성 프레임워크 = DB와 관련된 프레임워크(MyBatis,Hibernate(JPA))
자바 프레임워크 = 웹 어플리케이션 개발(Spring Framework)
화면구현 프레임워크 = (부트스트랩)
기능 및 지원 프레임워크 = (JUnit5(테스트기능))

JDBC에서 굳이하나하나 설정해줬던 부분을 MyBatis에서 미리설정해놓음으로써 더 편하게 쓸 수있다.

마이바티스는 xml파일 혹은 어노테이션을 활용하여 설정을 해준다.

Environment객체(DB 접속에 관한 환경 설정)
Environment environment = new Environment(
                "dev",//환경 정보 이름 dev = 개발 환경에서 쓰는 것이라고 알려줌
                new JdbcTransactionFactory(),//트랜잭션 매니저 종류(JDBC or MANAGED)
                new PooledDataSource()      //Connection Pool 사용 유무(Pooled or UnPooled)
        );

두번 째 인자 
JdbcTransactionFactory : 수동 커밋, ManagedTransactionFactory : 자동 커밋

세번 째 인자 
커넥션 풀은-> 커넥션 객체들이 여러개가 풀에 들어가있는 상태임 -> 커넥션 객체를 만드는데 시간이 들기 때문에 미리 만들어놓은 것이다. 

 new PooledDataSource(DRIVER,URL,USER,PASSWORD) 인자를 전달해줄 수도 있음

DB접속정보를 입력한 후 MyBatis 설정 객체를 생성한다.
/*생성한 환경 설정 정보로 MyBatis설정 객체 생성*/
Configuration configuration = new Configuration(environment);

다음으로 설정 객체에 매퍼 등록한다.

connection을 만들고 싶다. -> MyBatis에서 Connection이 SqlSession이다. 
SqlSession안에는 JDBCTemplate기능들(getConnection,close,commit,rollback)이 구현되어있다.
SqlSession을 만드는 과정 SqlSessionFactoryBuildr에 build(설정정보)를 하면 SqlSessionFactory가 만들어진다(반환된다). SqlSessiontFactory를 통해 Connection이 필요할 때마다 SqlSession을 만들어낼 수 있다. 공장이기 때문
SqlSession sqlSession = sqlSessionFactory.openSession(false);
false -> autocommit의미
sqlSesseion생성 후 .getMapper(mapping해올 sql문있는 인터페이스)를 통해 Mapper객체를 만들고 인터페이스의 sql문 메소드를 .메소드를 통해 실행 
sql문을 한 번 사용하고 close()한다. 

어노테이션 혹은 xml설정파일을 통해 환경설정 가능

xml파일 
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration -> doc타입이 configuration이라는 의미
PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-config.dtd"  -> 정의되어있는 형식과 올바르게 작성했는지를 판단해주는 역할 

environmets 안에 environment가 존재하고 default= dev 어떤 환경을 쓸지를 결정해줌
<!-- JDBC or MANAGED-->
            <transactionManager type="JDBC"/> -> 자동커밋 수동커밋 결정

getResourceAsStream메소드 => 파일의 경로대로 읽어와서 InputStream에 담는다. 저장된 inputStream은 configuration과 같은 역할한다.

sqlSession.selectOne("mapper.selectDate"); 하나의 열만 반환함

객체가 언제 생성되서 언제소멸되는지를 고려해서 짜는 것이 중요하다. 
SqlSessionFactoryBuilder()는 SqlSessionFactory를 생성한 후 유지할 필요가 없다. 그러므로 메소드의 지역변수로 설정해주는 것이 가장 베스트이다.
SqlSessionFactory는어플리케이션이 실행하는 동안 존재해야한다. 그러므로 어플리케이션이 끝날 때까지는 존재하면 좋기 때문에 스태틱(프로그램이 실행될 때 생성, 종료될때 사라짐)을 활용 
SqsSession은 하나의 논리적인 기능을 수행할 때마다 하나의 객체가 필요하다. 그러므로 쓰레드 세이프하지 않다.(여러 쓰레드가 동시에 자원을 건들였을 때 위험하다.)그러므로 서비스 레이어를 통해 관리하는 것이 좋다. 

getSqlSession()메소드가  getConnection()과 같은 역할

mvc구조잡기 -> view에서 Controller 객체 생성, 메소드들 생성

mapper의 select태그의 속성 -> 구분할 수 있는 id 값,resultType필요

<!-- 조회한 컬럼과 DTO의 필드를 매핑(연결) 시키기 위한 설정으로 resultMap을 사용한다.-->
    <resultMap id="menuResultMap" type="com.ohgiraffers.section01.xmlconfig.MenuDTO">
        <!-- id태그는 pk에 해당하는 컬럼을 작성 -->
        <id property="menuCode" column="menu_code"/>
        <!-- result태그는 pk외의 일반 컬럼을 작성 -->
        <result property="menuName" column="menu_name"/>
        <result property="menuPrice" column="menu_price"/>
        <result property="categoryCode" column="category_code"/>
        <result property="orderableStatus" column="orderable_status"/>
    </resultMap>







